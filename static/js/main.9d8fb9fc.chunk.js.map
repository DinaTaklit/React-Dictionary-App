{"version":3,"sources":["context.js","category.js","components/Header/Header.js","components/Meanings/Meanings.js","components/ModeSwitcher/ModeSwitcher.js","App.js","index.js"],"names":["AppContext","React","createContext","AppProvider","children","useState","word","setWord","category","setCategory","meanings","setMeanings","darkMode","setDarkMode","fetchMeanings","a","axios","get","data","console","log","useEffect","Provider","value","useGlobalContext","useContext","categories","label","Header","darkTheme","createTheme","palette","primary","main","type","className","ThemeProvider","theme","TextField","onChange","e","target","select","countries","map","country","MenuItem","Meanings","style","backgroundColor","borderRadius","src","phonetics","audio","controls","meaning","item","definitions","def","color","definition","width","example","synonyms","length","s","ModeSwitcher","ModeSwitch","withStyles","switchBase","grey","checked","track","Switch","position","top","right","paddingTop","App","transition","Container","maxWidth","display","flexDirection","height","justifyContent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d8fb9fc.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport React, {useContext, useState, useEffect} from 'react'\r\n\r\nconst AppContext = React.createContext()\r\n\r\nexport const AppProvider = ({children}) => {\r\n\r\n    // State for typed word\r\n    const [word, setWord] = useState(\"\")\r\n    // State for the selected category\r\n    const [category, setCategory] = useState(\"en\")\r\n    // State for list of meanings \r\n    const [meanings, setMeanings] = useState([])\r\n    // State to switch between dark/light mode\r\n    const [darkMode, setDarkMode] = useState(true)\r\n\r\n    // Function that fetch meanings from the dictionary\r\n    const fetchMeanings = async () => {\r\n        try {\r\n            const {data} = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`)\r\n            setMeanings(data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    // UseEffect to fetch the meaning every time the word changes or the selected language changes\r\n    useEffect(() => {\r\n        fetchMeanings()\r\n    }, [word, category])\r\n\r\n    return (\r\n        <AppContext.Provider value={{\r\n            word, \r\n            setWord,\r\n            category,\r\n            setCategory,\r\n            meanings,\r\n            setMeanings,\r\n            darkMode,\r\n            setDarkMode\r\n        }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useGlobalContext = () => useContext(AppContext)\r\n","const categories = [\r\n    { value: \"English\", label: \"en\" },\r\n    { value: \"Hindi\", label: \"hi\" },\r\n    { value: \"Spanish\", label: \"es\" },\r\n    { value: \"French\", label: \"fr\" },\r\n    { value: \"Japanese\", label: \"ja\" },\r\n    { value: \"Russian\", label: \"ru\" },\r\n    { value: \"German\", label: \"de\" },\r\n    { value: \"Italian\", label: \"it\" },\r\n    { value: \"Korean\", label: \"ko\" },\r\n    { value: \"Brazilian Portuguese\", label: \"pt-BR\" },\r\n    { value: \"Arabic\", label: \"ar\" },\r\n    { value: \"Turkish\", label: \"tr\" },\r\n  ];\r\n  \r\n  export default categories;","import { MenuItem, TextField, createTheme, ThemeProvider } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useGlobalContext } from '../../context'\r\nimport countries from '../../category'\r\nimport './Header.css'\r\n\r\nfunction Header() {\r\n    // Get global state\r\n    const {word, setWord, category, setCategory, setMeanings,darkMode} = useGlobalContext()\r\n\r\n    // Functiokn that handle the change of the selected language\r\n    const handleChange = (event) => {\r\n        setCategory(event.target.value)\r\n        setMeanings([])\r\n    }\r\n\r\n    // Creatr the theme\r\n   const darkTheme = createTheme({\r\n        palette: {\r\n            primary:{\r\n                main: darkMode ? '#fff' : '#000'\r\n            },\r\n            type: darkMode ? 'dark' : 'light'\r\n        },\r\n   })\r\n\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <span className=\"title\">\r\n                {word ? word : 'Word Hunt'}\r\n            </span>\r\n            <div className=\"inputs\">\r\n                <ThemeProvider theme={darkTheme}>\r\n                    <TextField\r\n                        className=\"search\"\r\n                        label=\"search a Word\"\r\n                        onChange={(e) => setWord(e.target.value)}\r\n                    >\r\n                    </TextField>\r\n                    <TextField\r\n                        select\r\n                        label=\"Language\"\r\n                        value={category}\r\n                        onChange={(e) => handleChange(e)}\r\n                        className='select'\r\n                    >\r\n                        {\r\n                            countries.map((country) => (\r\n                                <MenuItem \r\n                                    key={country.label} \r\n                                    value={country.label}\r\n                                >\r\n                                    {country.value}\r\n                                </MenuItem>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                </ThemeProvider>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { dark } from '@material-ui/core/styles/createPalette'\r\nimport React from 'react'\r\nimport { useGlobalContext } from '../../context'\r\nimport './Meanings.css'\r\n\r\nfunction Meanings() {\r\n\r\n    // Get the global application context\r\n    const {meanings, word, darkMode} = useGlobalContext()\r\n\r\n    return (\r\n        <div className=\"meanings\">\r\n            {\r\n                // Audio\r\n                meanings[0] && word &&(\r\n                    <audio\r\n                        style={{ backgroundColor: \"#fff\", borderRadius: 10 }}\r\n                        src={meanings[0].phonetics[0] && meanings[0].phonetics[0].audio}\r\n                        controls\r\n                  >\r\n                    Your browser does not support the audio element.\r\n                  </audio>\r\n                )\r\n                // /Audio\r\n            }\r\n            \r\n            {\r\n                word === \"\" ? (\r\n                    <span\r\n                        className=\"subTitle\"\r\n                    >\r\n                        Start by typing a word in search\r\n                    </span>\r\n                ) : (\r\n                    meanings.map(meaning =>{\r\n                        const {meanings} = meaning\r\n                        // loop throw the list of meaning\r\n                        return meanings.map(item => \r\n                                // loop throw the list of definition\r\n                                item.definitions.map( def => \r\n                                    <div\r\n                                        className=\"singleMean\"\r\n                                        style={{\r\n                                            backgroundColor: darkMode ?  \"#fff\":  \"#3b5360\",\r\n                                            color: darkMode ? \"#000\" : \"#fff\",\r\n                                        }}\r\n                                    >\r\n                                        <b>{def.definition}</b>\r\n                                        <hr \r\n                                            style={{\r\n                                                backgroundColor:'black',\r\n                                                width:'100%',\r\n                                            }}\r\n                                        />\r\n                                        {\r\n                                            // Display example if there is any\r\n                                            def.example && (\r\n                                                <span>\r\n                                                    <b> Example: </b>\r\n                                                    {def.example}\r\n                                                </span>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            // Display synonyms if there is any\r\n                                            def.synonyms.length !==0 && (\r\n                                                <span>\r\n                                                    <b> Synonyms: </b>\r\n                                                    { def.synonyms.map(s =>`${s},`) }\r\n                                                </span>\r\n                                            )\r\n                                          \r\n                                        }\r\n                                    </div>\r\n                                \r\n                            ))\r\n                    })\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Meanings\r\n","import { Switch, withStyles } from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nfunction ModeSwitcher() {\r\n\r\n    // Get global context for dark mode state\r\n    const {darkMode, setDarkMode} = useGlobalContext()\r\n\r\n    // Mode switcher from Material UI\r\n    const ModeSwitch = withStyles({\r\n        switchBase: {\r\n          color: grey[50],\r\n          \"&$checked\": {\r\n            color: grey[900],\r\n          },\r\n          \"&$checked + $track\": {\r\n            backgroundColor: grey[500],\r\n          },\r\n        },\r\n        checked: {},\r\n        track: {},\r\n      })(Switch);\r\n\r\n    // Return the swithcer component\r\n    return (\r\n        <div\r\n        style={{ position: \"absolute\", top: 0, right: 15, paddingTop: 10 }}\r\n      >\r\n        <span>{darkMode ? \"Dark\" : \"Light\"} Mode</span>\r\n        <ModeSwitch\r\n          checked={darkMode}\r\n          onChange={() => setDarkMode(!darkMode)}\r\n        />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ModeSwitcher\r\n","import { Container } from \"@material-ui/core\";\nimport Header from \"./components/Header/Header\";\nimport Meanings from \"./components/Meanings/Meanings\";\nimport ModeSwitcher from \"./components/ModeSwitcher/ModeSwitcher\";\nimport { useGlobalContext } from \"./context\";\n\nfunction App() {\n\n  const {darkMode} = useGlobalContext()\n\n  return (\n    <main \n      style={{\n        backgroundColor: darkMode ? '#282c34' : '#fff',\n        color: darkMode ? '#fff' : '#000',\n        transition: 'all 0.5s linear'  \n      }}\n    >\n      <Container\n        maxWidth=\"md\" \n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"100vh\",\n          justifyContent: \"space-evenly\",\n        }}\n      >\n        <ModeSwitcher/>\n        <Header/>\n        <Meanings/>\n      </Container>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nimport {AppProvider} from './context';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <AppProvider>\n      <App/>\n    </AppProvider>\n  // </React.StrictMode>,\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}